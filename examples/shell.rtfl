// Define basic functions
func help {
	println("")
	println("=============================================================================")
	println("Help can be found at the Rtfl GitHub page (https://github.com/termermc/Rtfl),")
	println("or in the README.txt file that comes with the Rtfl interpreter.")
	println("=============================================================================")
	println("")
}
func quit {
	println("NOTE: This is an alias to Rtfl's exit() function, this should not be used in normal scripts!")
		error __err {
		exit()
	}
	// Detect if the exit function has been undefined
	if not(equals(__err, "ok")) {
		println("It appears that the exit function has been undefined, please press CTRL+C to exit.")
	}
}
def echo = true
func echo {
	if equals(arg1, "on") {
		echo = true
	}
	if equals(arg1, "off") {
		echo = false
	}
	if equals(arg1, true) {
		echo = true
	}
	if equals(arg1, false) {
		echo = false
	}
	if equals(echo, true) {
		println("Echo enabled")
	}
	if equals(echo, false) {
		println("Echo disabled")
	}
}

def backslash = " \\ "
backslash = substring(backslash, 1, 2)

func remove_backslash {
	local str = arg1
	local res = str
	if ends_with(str, backslash) {
		local strlen = string_length(str)
		strlen = sub(strlen, 1)
		res = substring(str, 0, strlen)
	}
	return res
}

open_terminal()

println("=========================")
println("Welcome to the Rtfl shell")
println("=========================\n")
println("Enter some code and hit enter to interpret it instantly!")
println("To return the result of executed lines, type echo(true), or use false to disable it.")
println("To use newlines, simply add \\ to the end of a line to use another line without executing.\n")

while terminal_open() {
	print("> ")
		error err {
			local cache = ""
			local in = read_terminal()
			local ends = ends_with(in, backslash)
			
			if ends {
				local subbed = remove_backslash(in)
				cache = concat(subbed, "\n")
				local add_cache = true
				
				while add_cache {
					print(">>")
					local input = read_terminal()
					local subbed = remove_backslash(input)
					cache = concat(cache, subbed)
					if ends_with(input, backslash) {
						cache = concat(cache, "\n")
					}
					if not(ends_with(input, backslash)) {
						add_cache = false
					}
				}
			}
			if not(ends) {
				cache = in
			}
			
			local res = eval(cache)
			local to_str = to_string(res)
			if echo {
				if not(equals(to_str, "null")) {
					println(res)
				}
			}
			undef res
		}
	if not(equals(err, "ok")) {
		println(err)
	}
}
